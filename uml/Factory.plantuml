@startuml

skinparam classAttributeIconSize 0
skinparam monochrome true

package "Shared" {
    enum Role <<enumeration>> {
        Admin
        Customer
    }
}

package "Utilisateur.Entities" {
    abstract class UtilisateurEntity {
        - id: int
        - email: string
        - password: string
        - prenom: string
        - nom: string
        - telephone: string
        - token: string
        - tokenGen: string
        - code: string
        - codeGen: string
        - favoris: array
        - passwordValidator: PasswordValidatorStrategy
        --
        # __construct(id: int, email: string, password: string, prenom: string, nom: string, telephone: string, token: string, tokenGen: string, code: string, codeGen: string, passwordValidator: PasswordValidatorStrategy)
        .. Factory ..
        + {static} utilisateurFactory(id: int, email: string, password: string, prenom: string, nom: string, telephone: string, token: string, tokenGen: string, privilege: int, code: string, codeGen: string): ?UtilisateurEntity
        + {static} createNewUser(id: int, email: string, password: string, prenom: string, nom: string, telephone: string, token: string, tokenGen: string, privilege: int): ?UtilisateurEntity
        .. Getters (incomplet) ..
        + {abstract} getRole(): Role
        .. Setters (incomplet) ..
        + setPassword(password: string): void
        .. Autres m√©thodes ..
        + checkTokenDate(): bool
        + isFavorite(produit: ProduitEntity): bool
        + isUserVerified(): bool
        + {static} generateRandomString(length: int): string
    }

    class AdminEntity {
        # __construct(id: int, email: string, password: string, prenom: string, nom: string, telephone: string, token: string, tokenGen: string, code: string, codeGen: string, passwordValidator: PasswordValidatorStrategy)
        --
        + getRole(): Role
    }

    class CustomerEntity {
        # __construct(id: int, email: string, password: string, prenom: string, nom: string, telephone: string, token: string, tokenGen: string, code: string, codeGen: string, passwordValidator: PasswordValidatorStrategy)
        --
        + getRole(): Role
    }

    UtilisateurEntity <|-- AdminEntity
    UtilisateurEntity <|-- CustomerEntity
}

UtilisateurEntity ..> Role : uses
AdminEntity ..> Role : returns
CustomerEntity ..> Role : returns

@enduml
